#include "compile.hpp"
#include <iostream>
#include <chrono>
#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <memory>
#include <cstdint>
#include <unordered_map>
#include <openssl/md5.h>

using namespace jcc;

static std::string program = "";

std::unordered_map<char, int> base64_map = {
    {'A', 0}, {'B', 1}, {'C', 2}, {'D', 3}, {'E', 4}, {'F', 5}, {'G', 6}, {'H', 7}, {'I', 8}, {'J', 9}, {'K', 10}, {'L', 11}, {'M', 12}, {'N', 13}, {'O', 14}, {'P', 15}, {'Q', 16}, {'R', 17}, {'S', 18}, {'T', 19}, {'U', 20}, {'V', 21}, {'W', 22}, {'X', 23}, {'Y', 24}, {'Z', 25}, {'a', 26}, {'b', 27}, {'c', 28}, {'d', 29}, {'e', 30}, {'f', 31}, {'g', 32}, {'h', 33}, {'i', 34}, {'j', 35}, {'k', 36}, {'l', 37}, {'m', 38}, {'n', 39}, {'o', 40}, {'p', 41}, {'q', 42}, {'r', 43}, {'s', 44}, {'t', 45}, {'u', 46}, {'v', 47}, {'w', 48}, {'x', 49}, {'y', 50}, {'z', 51}, {'0', 52}, {'1', 53}, {'2', 54}, {'3', 55}, {'4', 56}, {'5', 57}, {'6', 58}, {'7', 59}, {'8', 60}, {'9', 61}, {'+', 62}, {'/', 63}};

std::string base64_decode(const std::string &input)
{
    std::string result;
    result.reserve(input.size() * 3 / 4);

    for (size_t i = 0; i < input.size(); i += 4)
    {
        uint32_t tmp = 0;
        for (size_t j = 0; j < 4; ++j)
        {
            if (input[i + j] != '=')
            {
                tmp |= base64_map[input[i + j]] << (18 - j * 6);
            }
        }
        for (size_t j = 0; j < 3; ++j)
        {
            if (input[i + j + 1] != '=')
            {
                result.push_back(static_cast<char>((tmp >> (16 - j * 8)) & 0xFF));
            }
        }
    }
    return result;
}

int main()
{
    // Start measuring time using the rdtsc instruction
    uint64_t start, end;
    jcc::TokenList list;
    std::vector<uint64_t> times;

    std::unique_ptr<jcc::CompilationUnit> unit = std::make_unique<jcc::CompilationUnit>();

    std::string raw = base64_decode(program);

    // save to tmp file
    std::ofstream tmp("tmp.j");
    tmp << raw;
    tmp.close();

    unit->add_file("tmp.j");
    unit->add_flag(jcc::CompileFlag::TranslateOnly);
    unit->set_output_file("tmp.cpp");

    CompilationJob job;
    job.add_unit("tmp.j", std::move(unit));

    for (size_t i = 0; i < 10; i++)
    {
        start = 0;
        end = 0;
        start = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();

        // Call the function you want to measure
        job.run_job();

        end = std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count();
        // Calculate the elapsed clock cycles
        times.push_back(end - start);

        // print all messages
        for (auto message : job.messages())
        {
            std::cerr << message->ansi_message() << std::endl;
        }

        if (!job.success())
        {
            std::cerr << "compilation failed" << std::endl;
            return 1;
        }
    }

    list = unit->lex(raw);

    // read output file
    std::ifstream out("tmp.cpp");
    std::string output_code((std::istreambuf_iterator<char>(out)),
                            std::istreambuf_iterator<char>());
    out.close();

    // Calculate the average clock cycles
    uint64_t sum = 0;
    for (auto &time : times)
    {
        sum += time;
    }
    double avg = sum / times.size();

    std::cout << "Total tokens: " << list.size() << std::endl;
    std::cout << "Avg total: " << (uint64_t)avg << " ns" << std::endl;
    std::cout << "Avg compute time: " << avg / (raw.size() * 8) << " ns/input bit" << std::endl;

    if (list.size() == 0)
    {
        std::cout << "Lexer failed" << std::endl;
        return 1;
    }

    std::cout << "Avg: " << avg / list.size() << " ns/token" << std::endl;
    std::cout << "Avg: " << avg / (output_code.size() * 8) << " ns/output bit" << std::endl;

    std::remove("tmp.j");
    std::remove("tmp.cpp");

    return 0;
}